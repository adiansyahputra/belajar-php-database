Pengenalan PDO

PDO singkatan dari PHP Data Object
Yaitu sebuah spesifikasi interface untuk standard komunikasi antara PHP dengan Database
PDO adalah sebuah spesifikasi, sehingga kita butuh implementasinya atau extension nya untuk mengaktifkan PDO
PDO menyediakan abstraction layer yang sama untuk semua database, artinya mau menggunakan database apapun, kita akan menggunakan kode PDO yang sama, dan cara kerjanya sama
Hal ini membuat penggunaan PDO lebih flexible dibandingkan menggunakan function-function bawaan dari driver databasenya

Mengecek PDO Extension yang Terinstall

<?php

phpinfo();

PDO

PDO support => enabled
PDO drivers => mysql, pgsql, sqlite

MySQL
Pada course ini, kita akan menggunakan MySQL sebagai database yang akan kita gunakan untuk praktek PHP Database
Jadi pastikan di komputer teman-teman sudah terinstall driver PDO untuk MySQL
Jika teman-teman belum mengerti tentang MySQL, saya sarankan teman-teman belajar dulu di course yang pernah saya buat tentang MySQL

Koneksi Database
Sebelum kita melakukan manipulasi data ke database dengan mengirimkan perintah SQL, hal yang perlu kita lakukan terlebih dahulu adalah membuat koneksi ke database
Untuk membuat koneksi ke database MySQL menggunakan PDO sangatlah mudah, kita hanya butuh membuat object PDO
Dan saat kita membuat koneksi ke MySQL menggunakan PDO, kita perlu tentukan host, port, database name, username dan juga password nya

Kode : Membuat Koneksi Database
<?php

$host = "localhost";
$port = 3306;
$database = "belajar_php_database";
$username = "root";
$password = "";

try {
    $connection = new PDO("mysql:host=$host:$port;dbname=$database", $username, $password);
    echo "Sukses terkoneksi ke database MySQL" . PHP_EOL;

    // menutup koneksi
    $connection = null;
}catch (PDOException $exception){
    echo "Gagal terkoneksi ke database MySQL : " . $exception->getMessage() . PHP_EOL;
}

Error PDOException
Hampir semua error yang terjadi di PDO merupakan class exception dari PDOException atau class turunannya
Sehingga jika kita ingin melakukan sesuatu jika terjadi komunikasi error ke database, kita bisa gunakan try catch 

Kode : Try Catch PDOException
<?php

$host = "localhost";
$port = 3306;
$database = "belajar_php_database";
$username = "root";
$password = "";

try {
    $connection = new PDO("mysql:host=$host:$port;dbname=$database", $username, $password);
    echo "Sukses terkoneksi ke database MySQL" . PHP_EOL;

    // menutup koneksi
    $connection = null;
}catch (PDOException $exception){
    echo "Gagal terkoneksi ke database MySQL : " . $exception->getMessage() . PHP_EOL;
}

Menutup Koneksi
Jika kita telah selesai melakukan operasi ke database, lalu kita sudah tidak memerlukannya lagi, maka kita wajib menutup koneksi ke database nya
Setiap database punya batas maksimal koneksi ke database, contohnya MySQL secara default batas maksimal nya adalah 151 koneksi
Jika sampai kita lupa menutup koneksi sehingga koneksi dianggap masih terbuka, maka lama kelamaan koneksi bisa cepat mencapai maksimal koneksi, sehingga ketika kita ingin membuat koneksi baru, maka akan ditolak oleh MySQL

Kode : Menutup Koneksi
try {
    $connection = new PDO("mysql:host=$host:$port;dbname=$database", $username, $password);
    echo "Sukses terkoneksi ke database MySQL" . PHP_EOL;

    // menutup koneksi
    $connection = null;
}catch (PDOException $exception){
    echo "Gagal terkoneksi ke database MySQL : " . $exception->getMessage() . PHP_EOL;
}

Execute SQL
Setelah kita terkoneksi ke database, sudah pasti kita ingin mengirim perintah SQL ke database tersebut dari aplikasi PHP kita
Untuk mengirim perintah SQL, kita bisa menggunakan function execute(sql) yang terdapat di object PDO yang sudah kita buat
Function execute(sql) bisa kita gunakan untuk semua jenis SQL yang tidak membutuhkan result data, misal CREATE TABLE, INSERT, UPDATE, DELETE, ALTER TABLE, dan lain-lain

Kode : Membuat getConnection()
<?php

function getConnection(): PDO
{
    $host = "localhost";
    $port = 3306;
    $database = "belajar_php_database";
    $username = "root";
    $password = "";

    return new PDO("mysql:host=$host:$port;dbname=$database", $username, $password);
}

Kode : Membuat Table Customers
CREATE TABLE customers
(
    id VARCHAR(100) NOT NULL,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    PRIMARY KEY (id)
) ENGINE = InnoDB;

Kode : Eksekusi SQL Menggunakan PDO
<?php

require_once __DIR__ . '/GetConnection.php';

$connection = getConnection();

$sql = <<<SQL
    INSERT INTO customers(id, name, email)
    VALUES ('khannedy', 'Khannedy', 'khannedy@test.com');
SQL;

$connection->exec($sql);

$connection = null;

Query SQL
Setelah kita tahu bagaimana cara mengirim SQL ke MYSQL yang tidak membutuhkan result data, sekarang bagaimana melakukan Query SQL yang membutuhkan result data seperti SQL SELECT?
PDO memiliki function bernama query(sql), ini digunakan untuk melakukan query data dari database
Return value dari function query(sql) adalah sebuah object dari PDOStatement

